name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install root dependencies
        run: npm ci

      - name: Install client dependencies
        run: cd client && npm ci

      - name: Run root tests
        run: npm test

      - name: Run client tests
        run: cd client && npm test

      - name: Start servers and run E2E tests
        run: |
          # Start the backend API server in background
          npm start &
          API_SERVER_PID=$!

          # Wait for API server to be ready
          echo "Waiting for API server to start..."
          npx wait-on http://localhost:5000 --timeout 60000

          # Start the frontend dev server in background
          cd client
          npm run dev &
          DEV_SERVER_PID=$!

          # Wait for frontend server to be ready
          echo "Waiting for development server to start..."
          npx wait-on http://localhost:5178 --timeout 60000

          # Run E2E tests
          echo "Running E2E tests..."
          npm run e2e

          # Clean up
          kill $DEV_SERVER_PID || true
          kill $API_SERVER_PID || true
        env:
          CI: true
          NODE_ENV: test
          PORT: 5000

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install root dependencies
        run: npm ci

      - name: Install client dependencies
        run: cd client && npm ci

      - name: Build frontend
        run: cd client && npm run build

      - name: Check Vercel secrets
        run: |
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "Warning: VERCEL_TOKEN is not set"
            exit 1
          fi
          if [ -z "${{ secrets.ORG_ID }}" ]; then
            echo "Warning: ORG_ID is not set"
            exit 1
          fi
          if [ -z "${{ secrets.PROJECT_ID }}" ]; then
            echo "Warning: PROJECT_ID is not set"
            exit 1
          fi

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: "--prod"
